#version 460
#extension GL_EXT_mesh_shader : require

// Add struct definitions
struct Cluster {
    uint lightOffset;
    uint lightCount;
    uint objectOffset;
    uint objectCount;
};

struct RenderableObject {
    mat4 transform;
    mat4 prevTransform;
    uint meshID;
    uint materialID;
};

struct ClusterLight {
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
    int type;
    float spotAngle;
    float spotSoftness;
    float padding;
};

// Add descriptor bindings
layout(set = 0, binding = 0) uniform ClusterUBO {
    mat4 viewMatrix;
    mat4 projMatrix;
    vec4 cameraPos;
    uvec4 clusterDimensions;
    vec4 zPlanes;
    uint numLights;
    uint numObjects;
    uint numClusters;
    uint padding;
};

layout(set = 0, binding = 1) buffer ClusterBuffer {
    Cluster clusters[];
};

layout(set = 0, binding = 2) buffer ObjectBuffer {
    RenderableObject objects[];
};

layout(set = 0, binding = 4) buffer IndexBuffer {
    uint indices[];
};

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

// Minimal task shader just to emit some work
void main() {
    // CRITICAL: Only ONE invocation should emit tasks!
    if (gl_LocalInvocationIndex == 0) {
        // Calculate how many workgroups needed (each workgroup = one mesh task)
        // Divide total clusters by 32 (threads per workgroup) and round up
        uint workgroupCount = (numClusters + 31) / 32;
        
        // Limit to reasonable count (important!)
        workgroupCount = min(workgroupCount, 16);
        
        // Always emit at least ONE workgroup for testing
        workgroupCount = max(workgroupCount, 1);
        
        // Emit the tasks
        EmitMeshTasksEXT(workgroupCount, 1, 1);
    }
}