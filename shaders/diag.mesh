// diag.mesh - Diagnostic mesh shader with buffer validation
#version 460
#extension GL_EXT_mesh_shader : require

// All buffer bindings
layout(set = 0, binding = 0) uniform ClusterUBO {
    mat4 viewMatrix;
    mat4 projMatrix;
    mat4 invViewMatrix;
    mat4 invProjMatrix;
    vec4 cameraPos;
    uvec4 clusterDimensions;
    vec4 zPlanes;
    vec4 screenSize;
    uint numLights;
    uint numObjects;
    uint numClusters;
    uint frameNumber;
    float time;
    float deltaTime;
    uint flags;
} ubo;

struct Cluster {
    uint lightOffset;
    uint lightCount;
    uint objectOffset;
    uint objectCount;
};

layout(set = 0, binding = 1) readonly buffer ClusterBuffer {
    Cluster clusters[];
};

layout(set = 0, binding = 2) readonly buffer ObjectBuffer {
    uint objectData[];
};

layout(set = 0, binding = 3) readonly buffer LightBuffer {
    uint lightData[];
};

layout(set = 0, binding = 4) readonly buffer IndexBuffer {
    uint indices[];
};

layout(set = 0, binding = 5) readonly buffer MeshInfoBuffer {
    uint meshInfoData[];
};

layout(set = 0, binding = 6) readonly buffer VertexBuffer {
    float vertexData[];
};

layout(set = 0, binding = 7) readonly buffer MeshIndexBuffer {
    uint meshIndices[];
};

layout(set = 0, binding = 8) readonly buffer MaterialBuffer {
    uint materialData[];
};

layout(local_size_x = 1) in;
layout(triangles, max_vertices = 33, max_primitives = 11) out;  // 11 triangles for 11 resources

layout(location = 0) out vec4 meshColor[];
layout(location = 1) flat out uint bufferIndex[];

void main() {
    // We'll create 11 triangles in a grid pattern
    const uint NUM_BUFFERS = 11;
    
    SetMeshOutputsEXT(NUM_BUFFERS * 3, NUM_BUFFERS);
    
    // Test each buffer and assign colors
    vec4 bufferColors[NUM_BUFFERS];
    
    // 0. UBO - Test by checking if values are non-zero
    bufferColors[0] = (ubo.numClusters > 0) ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
    
    // 1. ClusterBuffer - Check if we can read first cluster
    bufferColors[1] = vec4(1.0, 0.0, 0.0, 1.0); // Red = missing
    if (ubo.numClusters > 0) {
        uint testVal = clusters[0].objectCount + clusters[0].lightCount;
        bufferColors[1] = vec4(0.0, 1.0, 0.0, 1.0); // Green = valid
    }
    
    // 2. ObjectBuffer - Try to read first element
    bufferColors[2] = vec4(1.0, 0.0, 0.0, 1.0);
    if (ubo.numObjects > 0) {
        uint testVal = objectData[0];
        bufferColors[2] = vec4(0.0, 1.0, 0.0, 1.0);
    }
    
    // 3. LightBuffer
    bufferColors[3] = vec4(1.0, 0.0, 0.0, 1.0);
    if (ubo.numLights > 0) {
        uint testVal = lightData[0];
        bufferColors[3] = vec4(0.0, 1.0, 0.0, 1.0);
    }
    
    // 4. IndexBuffer - Always try to read (should have cluster indices)
    bufferColors[4] = vec4(1.0, 0.0, 0.0, 1.0);
    {
        uint testVal = indices[0];
        bufferColors[4] = vec4(0.0, 1.0, 0.0, 1.0);
    }
    
    // 5. MeshInfoBuffer
    bufferColors[5] = vec4(1.0, 0.0, 0.0, 1.0);
    {
        uint testVal = meshInfoData[0];
        bufferColors[5] = vec4(0.0, 1.0, 0.0, 1.0);
    }
    
    // 6. VertexBuffer
    bufferColors[6] = vec4(1.0, 0.0, 0.0, 1.0);
    {
        float testVal = vertexData[0];
        bufferColors[6] = vec4(0.0, 1.0, 0.0, 1.0);
    }
    
    // 7. MeshIndexBuffer
    bufferColors[7] = vec4(1.0, 0.0, 0.0, 1.0);
    {
        uint testVal = meshIndices[0];
        bufferColors[7] = vec4(0.0, 1.0, 0.0, 1.0);
    }
    
    // 8. MaterialBuffer
    bufferColors[8] = vec4(1.0, 0.0, 0.0, 1.0);
    {
        uint testVal = materialData[0];
        bufferColors[8] = vec4(0.0, 1.0, 0.0, 1.0);
    }
    
    // 9-10. Textures - shown as blue (can't test from mesh shader)
    bufferColors[9] = vec4(0.0, 0.0, 1.0, 1.0);   // Albedo texture
    bufferColors[10] = vec4(0.0, 0.0, 1.0, 1.0);  // Normal texture
    
    // Create triangles in a 4x3 grid
    for (uint i = 0; i < NUM_BUFFERS; i++) {
        uint row = i / 4;
        uint col = i % 4;
        
        float x = -0.8 + col * 0.4;
        float y = 0.6 - row * 0.4;
        float size = 0.15;
        
        uint baseVertex = i * 3;
        
        // Triangle vertices
        gl_MeshVerticesEXT[baseVertex + 0].gl_Position = vec4(x - size, y - size, 0.0, 1.0);
        gl_MeshVerticesEXT[baseVertex + 1].gl_Position = vec4(x + size, y - size, 0.0, 1.0);
        gl_MeshVerticesEXT[baseVertex + 2].gl_Position = vec4(x, y + size, 0.0, 1.0);
        
        // Assign colors
        meshColor[baseVertex + 0] = bufferColors[i];
        meshColor[baseVertex + 1] = bufferColors[i];
        meshColor[baseVertex + 2] = bufferColors[i];
        
        // Buffer index for fragment shader
        bufferIndex[baseVertex + 0] = i;
        bufferIndex[baseVertex + 1] = i;
        bufferIndex[baseVertex + 2] = i;
        
        // Triangle indices
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(baseVertex, baseVertex + 1, baseVertex + 2);
    }
}